#!/usr/bin/env python3
"""
Healthcare FHIR MCP Server
Generated by MCP Server Creation System

This server provides FHIR (Fast Healthcare Interoperability Resources) integration
for accessing healthcare data from Electronic Health Record (EHR) systems.

Capabilities:
- FHIR R4 API integration
- Patient data retrieval
- Clinical observations access
- Medication management
- Condition monitoring
- Practitioner information
"""

import asyncio
import logging
from typing import Any, Dict, List, Optional, Union
from datetime import datetime
import json
import httpx
from urllib.parse import urljoin, urlencode

from mcp.server import Server, NotificationOptions
from mcp.server.models import InitializeResult
import mcp.server.stdio
import mcp.types as types

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class HealthcareFhirServer:
    """
    Healthcare FHIR MCP Server for EHR system integration.
    
    This server provides:
    - Patient search and retrieval
    - Clinical observation access
    - Medication information
    - Condition tracking
    - Practitioner directory
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """Initialize the FHIR MCP server with optional configuration."""
        self.config = config or {}
        self.server = Server("healthcare-fhir-server")
        
        # FHIR configuration
        self.fhir_base_url = self.config.get('fhir_base_url', 'https://r4.smarthealthit.org')
        self.auth_token = self.config.get('auth_token')
        self.timeout = self.config.get('timeout', 30)
        
        self.setup_handlers()
        logger.info("Initialized Healthcare FHIR Server")
    
    def setup_handlers(self):
        """Setup all MCP handlers for FHIR operations."""
        
        # List available tools
        @self.server.list_tools()
        async def list_tools() -> List[types.Tool]:
            """List all available FHIR tools."""
            return [
                types.Tool(
                    name="search-patients",
                    description="Search for patients by name, identifier, or demographics",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "name": {"type": "string", "description": "Patient name (family or given)"},
                            "identifier": {"type": "string", "description": "Patient identifier (MRN, SSN, etc.)"},
                            "birthdate": {"type": "string", "description": "Birth date (YYYY-MM-DD)"},
                            "gender": {"type": "string", "enum": ["male", "female", "other", "unknown"]},
                            "limit": {"type": "integer", "description": "Maximum results to return", "default": 10}
                        }
                    }
                ),
                types.Tool(
                    name="get-patient-data",
                    description="Get comprehensive patient data by ID",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "patient_id": {"type": "string", "description": "FHIR Patient ID"},
                            "include_observations": {"type": "boolean", "default": True},
                            "include_conditions": {"type": "boolean", "default": True},
                            "include_medications": {"type": "boolean", "default": True}
                        },
                        "required": ["patient_id"]
                    }
                ),
                types.Tool(
                    name="search-observations",
                    description="Search for clinical observations",
                    inputSchema={
                        "type": "object", 
                        "properties": {
                            "patient_id": {"type": "string", "description": "Patient ID"},
                            "code": {"type": "string", "description": "LOINC or SNOMED code"},
                            "category": {"type": "string", "description": "Observation category"},
                            "date": {"type": "string", "description": "Observation date range"}
                        }
                    }
                ),
                types.Tool(
                    name="get-medications",
                    description="Get patient medications",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "patient_id": {"type": "string", "description": "Patient ID"},
                            "status": {"type": "string", "enum": ["active", "inactive", "entered-in-error"]}
                        },
                        "required": ["patient_id"]
                    }
                ),
                types.Tool(
                    name="search-conditions",
                    description="Search for patient conditions/diagnoses",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "patient_id": {"type": "string", "description": "Patient ID"},
                            "clinical_status": {"type": "string", "enum": ["active", "resolved", "inactive"]},
                            "category": {"type": "string", "description": "Condition category"}
                        }
                    }
                ),
                types.Tool(
                    name="validate-fhir-resource",
                    description="Validate a FHIR resource against the specification",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "resource": {"type": "object", "description": "FHIR resource to validate"},
                            "resource_type": {"type": "string", "description": "FHIR resource type"}
                        },
                        "required": ["resource", "resource_type"]
                    }
                )
            ]
        
        # Handle tool execution
        @self.server.call_tool()
        async def call_tool(name: str, arguments: Optional[Dict[str, Any]]) -> List[types.TextContent]:
            """Execute a FHIR tool with the given arguments."""
            try:
                logger.info(f"Executing FHIR tool: {name} with args: {arguments}")
                
                if name == "search-patients":
                    return await self.search_patients(**arguments or {})
                elif name == "get-patient-data":
                    return await self.get_patient_data(**arguments or {})
                elif name == "search-observations":
                    return await self.search_observations(**arguments or {})
                elif name == "get-medications":
                    return await self.get_medications(**arguments or {})
                elif name == "search-conditions":
                    return await self.search_conditions(**arguments or {})
                elif name == "validate-fhir-resource":
                    return await self.validate_fhir_resource(**arguments or {})
                else:
                    raise ValueError(f"Unknown FHIR tool: {name}")
                    
            except Exception as e:
                logger.error(f"Error executing FHIR tool {name}: {str(e)}")
                return [types.TextContent(
                    type="text", 
                    text=f"Error executing {name}: {str(e)}"
                )]
        
        # List available resources
        @self.server.list_resources()
        async def list_resources() -> List[types.Resource]:
            """List all available FHIR resources."""
            return [
                types.Resource(
                    uri="fhir://metadata",
                    name="FHIR Server Metadata",
                    description="FHIR server capability statement",
                    mimeType="application/json"
                ),
                types.Resource(
                    uri="fhir://patient-summary",
                    name="Patient Summary Template",
                    description="Standard patient summary format",
                    mimeType="application/json"
                ),
                types.Resource(
                    uri="fhir://observation-codes",
                    name="Common Observation Codes",
                    description="Frequently used LOINC codes for observations",
                    mimeType="application/json"
                )
            ]
        
        # Handle resource reading
        @self.server.read_resource()
        async def read_resource(uri: str) -> str:
            """Read FHIR resource content."""
            try:
                logger.info(f"Reading FHIR resource: {uri}")
                
                if uri == "fhir://metadata":
                    return await self.get_server_metadata()
                elif uri == "fhir://patient-summary":
                    return await self.get_patient_summary_template()
                elif uri == "fhir://observation-codes":
                    return await self.get_common_observation_codes()
                else:
                    raise ValueError(f"Unknown FHIR resource URI: {uri}")
                    
            except Exception as e:
                logger.error(f"Error reading FHIR resource {uri}: {str(e)}")
                raise
    
    async def search_patients(self, name: Optional[str] = None, identifier: Optional[str] = None, 
                            birthdate: Optional[str] = None, gender: Optional[str] = None, 
                            limit: int = 10) -> List[types.TextContent]:
        """Search for patients using FHIR Patient resource."""
        try:
            params = {"_count": limit}
            
            if name:
                params["name"] = name
            if identifier:
                params["identifier"] = identifier
            if birthdate:
                params["birthdate"] = birthdate
            if gender:
                params["gender"] = gender
            
            url = f"{self.fhir_base_url}/Patient?" + urlencode(params)
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                headers = {"Accept": "application/fhir+json"}
                if self.auth_token:
                    headers["Authorization"] = f"Bearer {self.auth_token}"
                
                response = await client.get(url, headers=headers)
                response.raise_for_status()
                
                bundle = response.json()
                
                # Extract patient summaries
                patients = []
                for entry in bundle.get("entry", []):
                    patient = entry.get("resource", {})
                    if patient.get("resourceType") == "Patient":
                        summary = self._create_patient_summary(patient)
                        patients.append(summary)
                
                result = {
                    "total": bundle.get("total", 0),
                    "patients": patients
                }
                
                return [types.TextContent(
                    type="text",
                    text=json.dumps(result, indent=2)
                )]
                
        except httpx.HTTPStatusError as e:
            logger.error(f"FHIR API error: {e.response.status_code}")
            return [types.TextContent(
                type="text",
                text=f"FHIR API Error {e.response.status_code}: {e.response.text}"
            )]
        except Exception as e:
            logger.error(f"Patient search error: {str(e)}")
            return [types.TextContent(
                type="text",
                text=f"Patient search failed: {str(e)}"
            )]
    
    async def get_patient_data(self, patient_id: str, include_observations: bool = True,
                             include_conditions: bool = True, include_medications: bool = True) -> List[types.TextContent]:
        """Get comprehensive patient data."""
        try:
            # Get base patient resource
            patient_url = f"{self.fhir_base_url}/Patient/{patient_id}"
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                headers = {"Accept": "application/fhir+json"}
                if self.auth_token:
                    headers["Authorization"] = f"Bearer {self.auth_token}"
                
                # Fetch patient
                response = await client.get(patient_url, headers=headers)
                response.raise_for_status()
                patient = response.json()
                
                result = {
                    "patient": self._create_patient_summary(patient),
                    "observations": [],
                    "conditions": [],
                    "medications": []
                }
                
                # Fetch related resources
                if include_observations:
                    obs_url = f"{self.fhir_base_url}/Observation?patient={patient_id}&_count=50"
                    obs_response = await client.get(obs_url, headers=headers)
                    if obs_response.status_code == 200:
                        obs_bundle = obs_response.json()
                        for entry in obs_bundle.get("entry", []):
                            obs = entry.get("resource", {})
                            result["observations"].append(self._create_observation_summary(obs))
                
                if include_conditions:
                    cond_url = f"{self.fhir_base_url}/Condition?patient={patient_id}&_count=50"
                    cond_response = await client.get(cond_url, headers=headers)
                    if cond_response.status_code == 200:
                        cond_bundle = cond_response.json()
                        for entry in cond_bundle.get("entry", []):
                            cond = entry.get("resource", {})
                            result["conditions"].append(self._create_condition_summary(cond))
                
                if include_medications:
                    med_url = f"{self.fhir_base_url}/MedicationRequest?patient={patient_id}&_count=50"
                    med_response = await client.get(med_url, headers=headers)
                    if med_response.status_code == 200:
                        med_bundle = med_response.json()
                        for entry in med_bundle.get("entry", []):
                            med = entry.get("resource", {})
                            result["medications"].append(self._create_medication_summary(med))
                
                return [types.TextContent(
                    type="text",
                    text=json.dumps(result, indent=2)
                )]
                
        except Exception as e:
            logger.error(f"Patient data retrieval error: {str(e)}")
            return [types.TextContent(
                type="text",
                text=f"Failed to get patient data: {str(e)}"
            )]
    
    async def search_observations(self, patient_id: Optional[str] = None, code: Optional[str] = None,
                                category: Optional[str] = None, date: Optional[str] = None) -> List[types.TextContent]:
        """Search for clinical observations."""
        try:
            params = {"_count": 50}
            
            if patient_id:
                params["patient"] = patient_id
            if code:
                params["code"] = code
            if category:
                params["category"] = category
            if date:
                params["date"] = date
            
            url = f"{self.fhir_base_url}/Observation?" + urlencode(params)
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                headers = {"Accept": "application/fhir+json"}
                if self.auth_token:
                    headers["Authorization"] = f"Bearer {self.auth_token}"
                
                response = await client.get(url, headers=headers)
                response.raise_for_status()
                
                bundle = response.json()
                observations = []
                
                for entry in bundle.get("entry", []):
                    obs = entry.get("resource", {})
                    if obs.get("resourceType") == "Observation":
                        observations.append(self._create_observation_summary(obs))
                
                result = {
                    "total": bundle.get("total", 0),
                    "observations": observations
                }
                
                return [types.TextContent(
                    type="text",
                    text=json.dumps(result, indent=2)
                )]
                
        except Exception as e:
            logger.error(f"Observation search error: {str(e)}")
            return [types.TextContent(
                type="text",
                text=f"Observation search failed: {str(e)}"
            )]
    
    async def get_medications(self, patient_id: str, status: Optional[str] = None) -> List[types.TextContent]:
        """Get patient medications."""
        try:
            params = {"patient": patient_id, "_count": 50}
            if status:
                params["status"] = status
            
            url = f"{self.fhir_base_url}/MedicationRequest?" + urlencode(params)
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                headers = {"Accept": "application/fhir+json"}
                if self.auth_token:
                    headers["Authorization"] = f"Bearer {self.auth_token}"
                
                response = await client.get(url, headers=headers)
                response.raise_for_status()
                
                bundle = response.json()
                medications = []
                
                for entry in bundle.get("entry", []):
                    med = entry.get("resource", {})
                    if med.get("resourceType") == "MedicationRequest":
                        medications.append(self._create_medication_summary(med))
                
                result = {
                    "total": bundle.get("total", 0),
                    "medications": medications
                }
                
                return [types.TextContent(
                    type="text",
                    text=json.dumps(result, indent=2)
                )]
                
        except Exception as e:
            logger.error(f"Medication retrieval error: {str(e)}")
            return [types.TextContent(
                type="text",
                text=f"Medication retrieval failed: {str(e)}"
            )]
    
    async def search_conditions(self, patient_id: Optional[str] = None, 
                              clinical_status: Optional[str] = None,
                              category: Optional[str] = None) -> List[types.TextContent]:
        """Search for patient conditions."""
        try:
            params = {"_count": 50}
            
            if patient_id:
                params["patient"] = patient_id
            if clinical_status:
                params["clinical-status"] = clinical_status
            if category:
                params["category"] = category
            
            url = f"{self.fhir_base_url}/Condition?" + urlencode(params)
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                headers = {"Accept": "application/fhir+json"}
                if self.auth_token:
                    headers["Authorization"] = f"Bearer {self.auth_token}"
                
                response = await client.get(url, headers=headers)
                response.raise_for_status()
                
                bundle = response.json()
                conditions = []
                
                for entry in bundle.get("entry", []):
                    cond = entry.get("resource", {})
                    if cond.get("resourceType") == "Condition":
                        conditions.append(self._create_condition_summary(cond))
                
                result = {
                    "total": bundle.get("total", 0),
                    "conditions": conditions
                }
                
                return [types.TextContent(
                    type="text",
                    text=json.dumps(result, indent=2)
                )]
                
        except Exception as e:
            logger.error(f"Condition search error: {str(e)}")
            return [types.TextContent(
                type="text",
                text=f"Condition search failed: {str(e)}"
            )]
    
    async def validate_fhir_resource(self, resource: Dict[str, Any], resource_type: str) -> List[types.TextContent]:
        """Validate a FHIR resource against the specification."""
        try:
            # Basic validation checks
            errors = []
            warnings = []
            
            # Check resource type
            if resource.get("resourceType") != resource_type:
                errors.append(f"Resource type mismatch: expected {resource_type}, got {resource.get('resourceType')}")
            
            # Check required fields based on resource type
            required_fields = self._get_required_fields(resource_type)
            for field in required_fields:
                if field not in resource:
                    errors.append(f"Missing required field: {field}")
            
            # Validate data types and formats
            validation_errors = self._validate_data_types(resource, resource_type)
            errors.extend(validation_errors)
            
            result = {
                "valid": len(errors) == 0,
                "resource_type": resource_type,
                "errors": errors,
                "warnings": warnings,
                "validation_timestamp": datetime.utcnow().isoformat()
            }
            
            return [types.TextContent(
                type="text",
                text=json.dumps(result, indent=2)
            )]
            
        except Exception as e:
            logger.error(f"FHIR validation error: {str(e)}")
            return [types.TextContent(
                type="text",
                text=f"Validation failed: {str(e)}"
            )]
    
    async def get_server_metadata(self) -> str:
        """Get FHIR server capability statement."""
        try:
            url = f"{self.fhir_base_url}/metadata"
            
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                headers = {"Accept": "application/fhir+json"}
                response = await client.get(url, headers=headers)
                response.raise_for_status()
                
                return json.dumps(response.json(), indent=2)
                
        except Exception as e:
            logger.error(f"Metadata retrieval error: {str(e)}")
            return json.dumps({"error": f"Failed to get server metadata: {str(e)}"}, indent=2)
    
    async def get_patient_summary_template(self) -> str:
        """Get standard patient summary template."""
        template = {
            "resourceType": "Bundle",
            "id": "patient-summary-template",
            "type": "document",
            "timestamp": "2024-01-01T00:00:00Z",
            "entry": [
                {
                    "resource": {
                        "resourceType": "Composition",
                        "id": "composition-1",
                        "status": "final",
                        "type": {
                            "coding": [
                                {
                                    "system": "http://loinc.org",
                                    "code": "60591-5",
                                    "display": "Patient summary Document"
                                }
                            ]
                        },
                        "subject": {"reference": "Patient/example"},
                        "date": "2024-01-01T00:00:00Z",
                        "author": [{"reference": "Practitioner/example"}],
                        "title": "Patient Summary"
                    }
                }
            ]
        }
        
        return json.dumps(template, indent=2)
    
    async def get_common_observation_codes(self) -> str:
        """Get frequently used LOINC codes for observations."""
        common_codes = {
            "vital_signs": {
                "8480-6": "Systolic blood pressure",
                "8462-4": "Diastolic blood pressure", 
                "9279-1": "Respiratory rate",
                "8867-4": "Heart rate",
                "8310-5": "Body temperature",
                "29463-7": "Body weight",
                "8302-2": "Body height",
                "39156-5": "Body mass index"
            },
            "laboratory": {
                "2093-3": "Cholesterol [Mass/Volume] in Serum or Plasma",
                "2571-8": "Triglyceride [Mass/Volume] in Serum or Plasma", 
                "4548-4": "Hemoglobin A1c/Hemoglobin.total in Blood",
                "33747-0": "Glucose [Mass/Volume] in Blood by Glucometer",
                "6690-2": "Leukocytes [#/Volume] in Blood by Automated count"
            },
            "imaging": {
                "18748-4": "Diagnostic imaging study",
                "18782-3": "Radiology Report",
                "11525-3": "US Pelvis Fetus for pregnancy"
            }
        }
        
        return json.dumps(common_codes, indent=2)
    
    def _create_patient_summary(self, patient: Dict[str, Any]) -> Dict[str, Any]:
        """Create a patient summary from FHIR Patient resource."""
        name = ""
        if patient.get("name"):
            name_obj = patient["name"][0]
            family = name_obj.get("family", "")
            given = " ".join(name_obj.get("given", []))
            name = f"{given} {family}".strip()
        
        return {
            "id": patient.get("id"),
            "name": name,
            "gender": patient.get("gender"),
            "birthDate": patient.get("birthDate"),
            "identifiers": patient.get("identifier", []),
            "active": patient.get("active", True)
        }
    
    def _create_observation_summary(self, observation: Dict[str, Any]) -> Dict[str, Any]:
        """Create an observation summary from FHIR Observation resource."""
        code_text = ""
        if observation.get("code", {}).get("text"):
            code_text = observation["code"]["text"]
        elif observation.get("code", {}).get("coding"):
            code_text = observation["code"]["coding"][0].get("display", "")
        
        value_text = ""
        if observation.get("valueQuantity"):
            value = observation["valueQuantity"]
            value_text = f"{value.get('value')} {value.get('unit', '')}"
        elif observation.get("valueString"):
            value_text = observation["valueString"]
        elif observation.get("valueCodeableConcept"):
            concept = observation["valueCodeableConcept"]
            if concept.get("text"):
                value_text = concept["text"]
            elif concept.get("coding"):
                value_text = concept["coding"][0].get("display", "")
        
        return {
            "id": observation.get("id"),
            "code": code_text,
            "value": value_text,
            "effectiveDateTime": observation.get("effectiveDateTime"),
            "status": observation.get("status")
        }
    
    def _create_condition_summary(self, condition: Dict[str, Any]) -> Dict[str, Any]:
        """Create a condition summary from FHIR Condition resource."""
        code_text = ""
        if condition.get("code", {}).get("text"):
            code_text = condition["code"]["text"]
        elif condition.get("code", {}).get("coding"):
            code_text = condition["code"]["coding"][0].get("display", "")
        
        return {
            "id": condition.get("id"),
            "condition": code_text,
            "clinicalStatus": condition.get("clinicalStatus", {}).get("coding", [{}])[0].get("code"),
            "verificationStatus": condition.get("verificationStatus", {}).get("coding", [{}])[0].get("code"),
            "onsetDateTime": condition.get("onsetDateTime"),
            "recordedDate": condition.get("recordedDate")
        }
    
    def _create_medication_summary(self, medication: Dict[str, Any]) -> Dict[str, Any]:
        """Create a medication summary from FHIR MedicationRequest resource."""
        med_text = ""
        if medication.get("medicationCodeableConcept", {}).get("text"):
            med_text = medication["medicationCodeableConcept"]["text"]
        elif medication.get("medicationCodeableConcept", {}).get("coding"):
            med_text = medication["medicationCodeableConcept"]["coding"][0].get("display", "")
        
        return {
            "id": medication.get("id"),
            "medication": med_text,
            "status": medication.get("status"),
            "intent": medication.get("intent"),
            "authoredOn": medication.get("authoredOn"),
            "dosageInstruction": medication.get("dosageInstruction", [])
        }
    
    def _get_required_fields(self, resource_type: str) -> List[str]:
        """Get required fields for a FHIR resource type."""
        required_fields = {
            "Patient": ["resourceType"],
            "Observation": ["resourceType", "status", "code"],
            "Condition": ["resourceType", "subject"],
            "MedicationRequest": ["resourceType", "status", "intent", "subject"]
        }
        
        return required_fields.get(resource_type, ["resourceType"])
    
    def _validate_data_types(self, resource: Dict[str, Any], resource_type: str) -> List[str]:
        """Validate data types in FHIR resource."""
        errors = []
        
        # Basic validation - can be extended
        if "id" in resource and not isinstance(resource["id"], str):
            errors.append("ID must be a string")
        
        return errors
    
    def validate_config(self) -> bool:
        """Validate server configuration."""
        required_keys = ["fhir_base_url"]
        missing_keys = [key for key in required_keys if key not in self.config]
        
        if missing_keys:
            logger.error(f"Missing required configuration keys: {missing_keys}")
            return False
        
        return True
    
    async def health_check(self) -> Dict[str, Any]:
        """Perform health check and return status."""
        try:
            # Test FHIR server connectivity
            async with httpx.AsyncClient(timeout=5) as client:
                response = await client.get(f"{self.fhir_base_url}/metadata")
                fhir_accessible = response.status_code == 200
        except:
            fhir_accessible = False
        
        return {
            "status": "healthy" if fhir_accessible else "degraded",
            "fhir_server_accessible": fhir_accessible,
            "timestamp": datetime.utcnow().isoformat(),
            "version": "1.0.0",
            "config_valid": self.validate_config()
        }
    
    async def run(self):
        """Run the FHIR MCP server."""
        if not self.validate_config():
            logger.error("Invalid configuration, server cannot start")
            return
        
        logger.info("Starting Healthcare FHIR MCP server...")
        
        async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):
            await self.server.run(
                read_stream, 
                write_stream, 
                InitializeResult(
                    protocolVersion="2024-11-05",
                    capabilities=types.ServerCapabilities(
                        tools={},
                        resources={},
                        logging={}
                    ),
                    serverInfo=types.Implementation(
                        name="healthcare-fhir-server",
                        version="1.0.0"
                    )
                )
            )

async def main():
    """Main entry point for the Healthcare FHIR server."""
    import argparse
    import sys
    
    parser = argparse.ArgumentParser(description="Healthcare FHIR MCP Server")
    parser.add_argument("--config", type=str, help="Path to configuration file")
    parser.add_argument("--debug", action="store_true", help="Enable debug logging")
    parser.add_argument("--fhir-url", type=str, help="FHIR server base URL")
    parser.add_argument("--auth-token", type=str, help="Authentication token")
    
    args = parser.parse_args()
    
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    
    config = {}
    if args.config:
        try:
            with open(args.config, 'r') as f:
                config = json.load(f)
        except Exception as e:
            logger.error(f"Failed to load config file: {e}")
            sys.exit(1)
    
    # Override config with command line arguments
    if args.fhir_url:
        config['fhir_base_url'] = args.fhir_url
    if args.auth_token:
        config['auth_token'] = args.auth_token
    
    server = HealthcareFhirServer(config)
    
    try:
        await server.run()
    except KeyboardInterrupt:
        logger.info("Server stopped by user")
    except Exception as e:
        logger.error(f"Server error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())