# MCP Testing Framework Docker Compose Configuration
# Complete testing environment with supporting services

version: '3.8'

services:
  # Main test runner service
  mcp-test-runner:
    build:
      context: ..
      dockerfile: docker/Dockerfile.test-runner
    container_name: mcp-test-runner
    volumes:
      - ../:/app:ro
      - test-results:/app/test_results
      - test-data:/app/test_data
      - test-logs:/app/logs
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - MCP_TEST_DATABASE_URL=sqlite:////app/test_data/test_results.db
      - MCP_TEST_REDIS_URL=redis://redis:6379/0
      - MCP_TEST_ENVIRONMENT=docker
    depends_on:
      - redis
      - postgres
      - mock-fhir-server
    networks:
      - mcp-test-network
    command: tail -f /dev/null  # Keep container running for interactive testing
    
  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: mcp-test-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - mcp-test-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for advanced test data storage
  postgres:
    image: postgres:15-alpine
    container_name: mcp-test-postgres
    environment:
      POSTGRES_DB: mcp_test_db
      POSTGRES_USER: mcp_test
      POSTGRES_PASSWORD: mcp_test_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mcp-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Mock FHIR server for healthcare testing
  mock-fhir-server:
    build:
      context: ../fixtures/mock_servers
      dockerfile: Dockerfile.fhir-mock
    container_name: mcp-mock-fhir
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
      - LOG_LEVEL=info
    volumes:
      - ./mock-data:/app/data
    networks:
      - mcp-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/metadata"]
      interval: 15s
      timeout: 10s
      retries: 3

  # Elasticsearch for log analysis and search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mcp-test-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - mcp-test-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: mcp-test-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - mcp-test-network

  # Performance testing tools
  k6-runner:
    image: grafana/k6:latest
    container_name: mcp-k6-runner
    volumes:
      - ../scripts/performance:/scripts
      - test-results:/results
    networks:
      - mcp-test-network
    command: sleep infinity  # Keep container running

  # Test report server
  report-server:
    image: nginx:alpine
    container_name: mcp-test-reports
    ports:
      - "8090:80"
    volumes:
      - test-results:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - mcp-test-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: mcp-test-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - mcp-test-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-test-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - mcp-test-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-test-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - mcp-test-network

volumes:
  test-results:
    driver: local
  test-data:
    driver: local
  test-logs:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  elasticsearch-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  mcp-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16