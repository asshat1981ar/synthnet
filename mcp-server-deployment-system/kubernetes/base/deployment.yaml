apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-server
  labels:
    app: mcp-server
    component: api
    tier: backend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: mcp-server
  template:
    metadata:
      labels:
        app: mcp-server
        component: api
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      # Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Service Account
      serviceAccountName: mcp-server
      
      # Init Containers for database migration
      initContainers:
      - name: db-migration
        image: mcp-server:latest
        command: ["python", "-m", "alembic", "upgrade", "head"]
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: mcp-server-secrets
              key: database-url
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      containers:
      - name: mcp-server
        image: mcp-server:latest
        imagePullPolicy: IfNotPresent
        
        # Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Ports
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: health
          containerPort: 8001
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Environment Variables
        env:
        - name: PORT
          value: "8000"
        - name: HEALTH_CHECK_PORT
          value: "8001"
        - name: METRICS_PORT
          value: "9090"
        - name: ENVIRONMENT
          value: "kubernetes"
        - name: LOG_LEVEL
          value: "INFO"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: mcp-server-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: mcp-server-secrets
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: mcp-server-secrets
              key: secret-key
        
        # Resource Limits
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        
        # Volume Mounts
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: app-logs
          mountPath: /app/logs
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        
        # Liveness Probe
        livenessProbe:
          httpGet:
            path: /health
            port: health
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        # Readiness Probe
        readinessProbe:
          httpGet:
            path: /ready
            port: health
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Startup Probe
        startupProbe:
          httpGet:
            path: /startup
            port: health
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
          successThreshold: 1
      
      # Volumes
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: app-logs
        emptyDir: {}
      - name: config-volume
        configMap:
          name: mcp-server-config
      
      # DNS Configuration
      dnsPolicy: ClusterFirst
      
      # Termination Grace Period
      terminationGracePeriodSeconds: 30
      
      # Node Selection
      nodeSelector:
        kubernetes.io/os: linux
      
      # Tolerations for node taints
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      
      # Affinity Rules
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - mcp-server
              topologyKey: kubernetes.io/hostname