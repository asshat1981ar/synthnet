# GitHub Actions CI/CD Pipeline for MCP Server Deployment
# Supports multiple environments and deployment targets

name: MCP Server Deployment Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production
      deployment_target:
        description: 'Deployment target'
        required: true
        default: 'kubernetes'
        type: choice
        options:
        - kubernetes
        - aws-lambda
        - aws-ecs
        - gcp-cloud-run
        - azure-container-instances

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/mcp-server
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Security scanning and validation
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Bandit security check
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-results.json || true
    
    - name: Upload security results
      uses: actions/upload-artifact@v3
      with:
        name: security-results
        path: |
          trivy-results.sarif
          bandit-results.json

  # Code quality and testing
  test:
    name: Test and Quality Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
        - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
        - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          .venv
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint code
      run: |
        # Linting with multiple tools
        black --check .
        isort --check-only .
        flake8 .
        mypy .
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
      run: |
        pytest tests/ \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --junitxml=pytest.xml \
          --maxfail=5 \
          --tb=short
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest.xml
          htmlcov/
          coverage.xml
    
    - name: Upload to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Build and push container images
  build:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-
    
    - name: Build and push container image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: containers/Dockerfile.production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
    
    - name: Sign container image
      uses: sigstore/cosign-installer@v3
    
    - name: Sign the published Docker image
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

  # Deploy to different environments
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Kubernetes (Development)
      run: |
        ./scripts/deploy.sh \
          --environment development \
          --target kubernetes \
          --image ${{ needs.build.outputs.image-tag }} \
          --namespace mcp-server-dev

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Kubernetes (Staging)
      run: |
        ./scripts/deploy.sh \
          --environment staging \
          --target kubernetes \
          --image ${{ needs.build.outputs.image-tag }} \
          --namespace mcp-server-staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    
    - name: Deploy to AWS Lambda
      if: github.event.inputs.deployment_target == 'aws-lambda'
      run: |
        ./scripts/deploy.sh \
          --environment production \
          --target aws-lambda \
          --image ${{ needs.build.outputs.image-tag }}
    
    - name: Deploy to Kubernetes (Production)
      if: github.event.inputs.deployment_target == 'kubernetes' || github.event.inputs.deployment_target == ''
      run: |
        ./scripts/deploy.sh \
          --environment production \
          --target kubernetes \
          --image ${{ needs.build.outputs.image-tag }} \
          --namespace mcp-server-prod

  # Performance and integration tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install test dependencies
      run: |
        pip install -r requirements-test.txt
    
    - name: Run integration tests
      env:
        TEST_BASE_URL: ${{ vars.STAGING_URL }}
        TEST_API_KEY: ${{ secrets.TEST_API_KEY }}
      run: |
        pytest tests/integration/ \
          --tb=short \
          --maxfail=3 \
          --junitxml=integration-test-results.xml
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: integration-test-results.xml

  # Performance testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run k6 performance tests
      uses: grafana/k6-action@v0.3.0
      with:
        filename: tests/performance/load-test.js
      env:
        K6_BASE_URL: ${{ vars.STAGING_URL }}
        K6_API_KEY: ${{ secrets.TEST_API_KEY }}
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: |
          summary.json
          results.json

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Rollback deployment
      run: |
        ./scripts/rollback.sh \
          --environment production \
          --target kubernetes \
          --namespace mcp-server-prod

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-production, integration-test, performance-test]
    
    steps:
    - name: Clean up temporary resources
      run: |
        echo "Cleaning up temporary resources..."
        # Add cleanup commands here
    
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow